suffix = c("",".y"))
meta2 <- read.csv("SRR_Acc_List.txt", sep="\t", header=T) %>%
inner_join(read.csv("PRJNA875066 Metadata.txt", header=T),
by = c("Name" = "Run"),
suffix = c("",".y"))
# print(setdiff(colnames(meta1),colnames(meta2)))
meta1_filtered <- subset(meta1, select = c("Name", "experiment_group", "sex", "treatment")) #Compare this to dendrogram
meta1_filtered$sex <- as.factor(meta1_filtered$sex)
meta1_filtered$treatment <- as.factor(meta1_filtered$treatment)
meta1_filtered$experiment_group <- as.factor(meta1_filtered$experiment_group)
meta1_aDR <- meta1_filtered %>% filter(treatment == "AL" | treatment == "aDR" )
meta1_YMP <- meta1_filtered %>% filter(treatment == "YMP" | treatment == "PBS" )
summary(meta1_filtered$sex)
summary(meta1_filtered$treatment)
#expr <- expr[,meta$Name] #to make sure the columns of the expression matrix are in the same order as rows in the metadata
#listDatasets(useEnsembl(biomart = "ensembl")) %>% filter(dataset == "mmusculus_gene_ensembl") #Is this the correct one?
library(biomaRt)
ensembl <- useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl")
meta_genes <- getBM(attributes = c("ensembl_gene_id",
"ensembl_gene_id_version",
"ensembl_transcript_id_version",
"mgi_symbol", # appearantly necessary for DEseq
"description",
"chromosome_name",
"start_position",
"end_position",
"strand"),
filters = "ensembl_gene_id_version",
values = rownames(expr),
mart = ensembl) %>%
right_join(data.frame(ensembl_gene_id_version = rownames(expr)), by = "ensembl_gene_id_version") %>% distinct(ensembl_gene_id_version, .keep_all = TRUE)
#expr_test <- expr[meta_genes$ensembl_transcript_id_version,]
#From here you need meta_genes
#meta_genes$expressed is expressed
#meta_genes$expressed
corr_pearson <- cor(log1p(expr[meta_genes$expressed,]))
corr_spearman <- cor(expr[meta_genes$expressed,], method = "spearman")
#pheatmap(corr_pearson)
plot <- pheatmap((corr_spearman), color = colorRampPalette(c((brewer.pal(n = 9, name = "YlGnBu"))))(100),  # custom color palette YlGnBu
display_numbers = T,
number_color = "black",
number_format = "%.2f")
#install.packages(c("tidyverse","ggrepel","BiocManager","pbapply","gplots","msigdbr"))
#BiocManager::install(c("biomaRt","sva","DESeq2","edgeR","tximport"))
#install.packages(c("pheatmap","RColorBrewer","devEMF", "plotly"))
#BiocManager::install(c("svglite", "fgsea"))
#install.packages("stringi", dependencies=TRUE)
#install.packages("viridis")
libraries = c("tidyverse","ggrepel","BiocManager","pbapply","gplots","msigdbr", "biomaRt","sva","DESeq2","edgeR", "dplyr", "biomaRt", "tximport", "ggplot2", "pheatmap", "RColorBrewer", "svglite","devEMF")
lapply(libraries, library, character.only=TRUE)
library(stringi)
library(viridis)
#pwd <- "/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository/data"
#pwd2 <- "/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository"
pwd <- "C:/Users/nicks/Desktop/Systems_Genomics/GitHub 2.0/SystemsGenomics2023/data"
pwd2 <- "C:/Users/nicks/Desktop/Systems_Genomics/GitHub 2.0/SystemsGenomics2023"
# pwd <- "/Users/valentin/Documents/ETH/Master Biotechnologie/Lectures/Sytems_Genomics/Local_git_hub_repository/data"
setwd(pwd)
samples <- list.files("rsem_genes_results_trimmed")
expr <- sapply(samples, function(sample){
file <- paste0("rsem_genes_results_trimmed/", sample)
#print(file)
quant <- read.csv(file, sep="\t", header=T)
tpm <- setNames(quant$TPM, quant$gene_id)
return(tpm)
})
SRR_codes <- colnames(expr)
SRR_codes <- gsub("\\.genes\\.results", "", SRR_codes)
colnames(expr) <- SRR_codes
setwd(pwd)
meta1 <- read.csv("SRR_Acc_List.txt", sep="\t", header=T) %>%
inner_join(read.csv("PRJNA946653 Metadata.txt", header=T),
by = c("Name" = "Run"),
suffix = c("",".y"))
meta2 <- read.csv("SRR_Acc_List.txt", sep="\t", header=T) %>%
inner_join(read.csv("PRJNA875066 Metadata.txt", header=T),
by = c("Name" = "Run"),
suffix = c("",".y"))
# print(setdiff(colnames(meta1),colnames(meta2)))
meta1_filtered <- subset(meta1, select = c("Name", "experiment_group", "sex", "treatment")) #Compare this to dendrogram
meta1_filtered$sex <- as.factor(meta1_filtered$sex)
meta1_filtered$treatment <- as.factor(meta1_filtered$treatment)
meta1_filtered$experiment_group <- as.factor(meta1_filtered$experiment_group)
meta1_aDR <- meta1_filtered %>% filter(treatment == "AL" | treatment == "aDR" )
meta1_YMP <- meta1_filtered %>% filter(treatment == "YMP" | treatment == "PBS" )
summary(meta1_filtered$sex)
summary(meta1_filtered$treatment)
#expr <- expr[,meta$Name] #to make sure the columns of the expression matrix are in the same order as rows in the metadata
#listDatasets(useEnsembl(biomart = "ensembl")) %>% filter(dataset == "mmusculus_gene_ensembl") #Is this the correct one?
library(biomaRt)
ensembl <- useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl")
meta_genes <- getBM(attributes = c("ensembl_gene_id",
"ensembl_gene_id_version",
"ensembl_transcript_id_version",
"mgi_symbol", # appearantly necessary for DEseq
"description",
"chromosome_name",
"start_position",
"end_position",
"strand"),
filters = "ensembl_gene_id_version",
values = rownames(expr),
mart = ensembl) %>%
right_join(data.frame(ensembl_gene_id_version = rownames(expr)), by = "ensembl_gene_id_version") %>% distinct(ensembl_gene_id_version, .keep_all = TRUE)
#expr_test <- expr[meta_genes$ensembl_transcript_id_version,]
pca <- prcomp(log1p(t(expr[meta_genes$expressed,])), center = TRUE,scale.=TRUE)
ensembl <- useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl")
tx2gene <- getBM(attributes = c("ensembl_transcript_id_version","ensembl_gene_id_version"),
filters = "ensembl_gene_id_version",
values = rownames(expr),
mart = ensembl) %>%
dplyr::select(ensembl_transcript_id_version, ensembl_gene_id_version)
setwd(pwd)
samples <- list.files("rsem_isoforms_results_trimmed") #Hier sollten isoforms sein! nicht dedup nextera!
filtered_samples <- samples[grep("\\.isoforms\\.results$",samples)]# Remove ".isoforms.results" from all column names
files_YMP <- file.path(paste0("rsem_isoforms_results_trimmed/", filtered_samples[1:6]))
files_aDR <- file.path(paste0("rsem_isoforms_results_trimmed/", filtered_samples[7:15]))
txi_YMP <- tximport(files_YMP, type = "rsem", tx2gene = tx2gene)
txi_aDR <- tximport(files_aDR, type = "rsem", tx2gene = tx2gene)
#expr[,15] <- data.frame(txi_aDR)[,9] # this code recovers the broken dataset from mouse 79
dds_aDR <- DESeqDataSetFromTximport(txi_aDR, colData = meta1_aDR, design = ~ treatment) #the output we be in gene_ids!
#summary(dds_aDR)
rownames(dds_aDR) %>% length() #gene_id_versions
# txi_aDR, dds_aDR: 56884 genes
dds_filtered_aDR <- dds_aDR[intersect(meta_genes[meta_genes$expressed,2],rownames(dds_aDR)),]
rownames(dds_filtered_aDR) %>% length() #gene_id_versions
# sum(meta_genes$expressed): 25649; dds_filtered_aDR: 25649
dds_filtered_aDR <- DESeq(dds_filtered_aDR, test="LRT", reduced= ~ 1) #If only one covariate, use ~1
expr <- expr + 0.000001
dds_filtered_aDR <- DESeq(dds_filtered_aDR, test="LRT", reduced= ~ 1) #If only one covariate, use ~1
expr
dds_aDR <- DESeqDataSetFromTximport(txi_aDR, colData = meta1_aDR, design = ~ treatment) #the output we be in gene_ids!
#summary(dds_aDR)
rownames(dds_aDR) %>% length() #gene_id_versions
# txi_aDR, dds_aDR: 56884 genes
dds_filtered_aDR <- dds_aDR[intersect(meta_genes[meta_genes$expressed,2],rownames(dds_aDR)),]
rownames(dds_filtered_aDR) %>% length() #gene_id_versions
# sum(meta_genes$expressed): 25649; dds_filtered_aDR: 25649
expr <- expr + 0.001
dds_filtered_aDR <- DESeq(dds_filtered_aDR, test="LRT", reduced= ~ 1) #If only one covariate, use ~1
sum(is.na(expr))
dds_aDR <- DESeqDataSetFromTximport(txi_aDR, colData = meta1_aDR, design = ~ treatment) #the output we be in gene_ids!
#summary(dds_aDR)
rownames(dds_aDR) %>% length() #gene_id_versions
# txi_aDR, dds_aDR: 56884 genes
dds_filtered_aDR <- dds_aDR[intersect(meta_genes[meta_genes$expressed,2],rownames(dds_aDR)),]
rownames(dds_filtered_aDR) %>% length() #gene_id_versions
# sum(meta_genes$expressed): 25649; dds_filtered_aDR: 25649
expr <- expr + 0.01
sum(is.na(expr))
dds_filtered_aDR <- DESeq(dds_filtered_aDR, test="LRT", reduced= ~ 1) #If only one covariate, use ~1
#install.packages(c("tidyverse","ggrepel","BiocManager","pbapply","gplots","msigdbr"))
#BiocManager::install(c("biomaRt","sva","DESeq2","edgeR","tximport"))
#install.packages(c("pheatmap","RColorBrewer","devEMF", "plotly"))
#BiocManager::install(c("svglite", "fgsea"))
#install.packages("stringi", dependencies=TRUE)
#install.packages("viridis")
libraries = c("tidyverse","ggrepel","BiocManager","pbapply","gplots","msigdbr", "biomaRt","sva","DESeq2","edgeR", "dplyr", "biomaRt", "tximport", "ggplot2", "pheatmap", "RColorBrewer", "svglite","devEMF")
lapply(libraries, library, character.only=TRUE)
library(stringi)
library(viridis)
#pwd <- "/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository/data"
#pwd2 <- "/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository"
pwd <- "C:/Users/nicks/Desktop/Systems_Genomics/GitHub 2.0/SystemsGenomics2023/data"
pwd2 <- "C:/Users/nicks/Desktop/Systems_Genomics/GitHub 2.0/SystemsGenomics2023"
# pwd <- "/Users/valentin/Documents/ETH/Master Biotechnologie/Lectures/Sytems_Genomics/Local_git_hub_repository/data"
setwd(pwd)
samples <- list.files("rsem_genes_results_trimmed")
expr <- sapply(samples, function(sample){
file <- paste0("rsem_genes_results_trimmed/", sample)
#print(file)
quant <- read.csv(file, sep="\t", header=T)
tpm <- setNames(quant$TPM, quant$gene_id)
return(tpm)
})
expr <- expr + 0.01
SRR_codes <- colnames(expr)
SRR_codes <- gsub("\\.genes\\.results", "", SRR_codes)
colnames(expr) <- SRR_codes
setwd(pwd)
meta1 <- read.csv("SRR_Acc_List.txt", sep="\t", header=T) %>%
inner_join(read.csv("PRJNA946653 Metadata.txt", header=T),
by = c("Name" = "Run"),
suffix = c("",".y"))
meta2 <- read.csv("SRR_Acc_List.txt", sep="\t", header=T) %>%
inner_join(read.csv("PRJNA875066 Metadata.txt", header=T),
by = c("Name" = "Run"),
suffix = c("",".y"))
# print(setdiff(colnames(meta1),colnames(meta2)))
meta1_filtered <- subset(meta1, select = c("Name", "experiment_group", "sex", "treatment")) #Compare this to dendrogram
meta1_filtered$sex <- as.factor(meta1_filtered$sex)
meta1_filtered$treatment <- as.factor(meta1_filtered$treatment)
meta1_filtered$experiment_group <- as.factor(meta1_filtered$experiment_group)
meta1_aDR <- meta1_filtered %>% filter(treatment == "AL" | treatment == "aDR" )
meta1_YMP <- meta1_filtered %>% filter(treatment == "YMP" | treatment == "PBS" )
summary(meta1_filtered$sex)
summary(meta1_filtered$treatment)
#expr <- expr[,meta$Name] #to make sure the columns of the expression matrix are in the same order as rows in the metadata
#listDatasets(useEnsembl(biomart = "ensembl")) %>% filter(dataset == "mmusculus_gene_ensembl") #Is this the correct one?
library(biomaRt)
ensembl <- useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl")
meta_genes <- getBM(attributes = c("ensembl_gene_id",
"ensembl_gene_id_version",
"ensembl_transcript_id_version",
"mgi_symbol", # appearantly necessary for DEseq
"description",
"chromosome_name",
"start_position",
"end_position",
"strand"),
filters = "ensembl_gene_id_version",
values = rownames(expr),
mart = ensembl) %>%
right_join(data.frame(ensembl_gene_id_version = rownames(expr)), by = "ensembl_gene_id_version") %>% distinct(ensembl_gene_id_version, .keep_all = TRUE)
#expr_test <- expr[meta_genes$ensembl_transcript_id_version,]
pca <- prcomp(log1p(t(expr[meta_genes$expressed,])), center = TRUE,scale.=TRUE)
ensembl <- useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl")
tx2gene <- getBM(attributes = c("ensembl_transcript_id_version","ensembl_gene_id_version"),
filters = "ensembl_gene_id_version",
values = rownames(expr),
mart = ensembl) %>%
dplyr::select(ensembl_transcript_id_version, ensembl_gene_id_version)
setwd(pwd)
samples <- list.files("rsem_isoforms_results_trimmed") #Hier sollten isoforms sein! nicht dedup nextera!
filtered_samples <- samples[grep("\\.isoforms\\.results$",samples)]# Remove ".isoforms.results" from all column names
files_YMP <- file.path(paste0("rsem_isoforms_results_trimmed/", filtered_samples[1:6]))
files_aDR <- file.path(paste0("rsem_isoforms_results_trimmed/", filtered_samples[7:15]))
txi_YMP <- tximport(files_YMP, type = "rsem", tx2gene = tx2gene)
txi_aDR <- tximport(files_aDR, type = "rsem", tx2gene = tx2gene)
#expr[,15] <- data.frame(txi_aDR)[,9] # this code recovers the broken dataset from mouse 79
dds_aDR <- DESeqDataSetFromTximport(txi_aDR, colData = meta1_aDR, design = ~ treatment) #the output we be in gene_ids!
#summary(dds_aDR)
rownames(dds_aDR) %>% length() #gene_id_versions
# txi_aDR, dds_aDR: 56884 genes
dds_filtered_aDR <- dds_aDR[intersect(meta_genes[meta_genes$expressed,2],rownames(dds_aDR)),]
rownames(dds_filtered_aDR) %>% length() #gene_id_versions
# sum(meta_genes$expressed): 25649; dds_filtered_aDR: 25649
sum(is.na(expr))
dds_filtered_aDR <- DESeq(dds_filtered_aDR, test="LRT", reduced= ~ 1) #If only one covariate, use ~1
#install.packages(c("tidyverse","ggrepel","BiocManager","pbapply","gplots","msigdbr"))
#BiocManager::install(c("biomaRt","sva","DESeq2","edgeR","tximport"))
#install.packages(c("pheatmap","RColorBrewer","devEMF", "plotly"))
#BiocManager::install(c("svglite", "fgsea"))
#install.packages("stringi", dependencies=TRUE)
#install.packages("viridis")
libraries = c("tidyverse","ggrepel","BiocManager","pbapply","gplots","msigdbr", "biomaRt","sva","DESeq2","edgeR", "dplyr", "biomaRt", "tximport", "ggplot2", "pheatmap", "RColorBrewer", "svglite","devEMF")
lapply(libraries, library, character.only=TRUE)
library(stringi)
library(viridis)
#pwd <- "/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository/data"
#pwd2 <- "/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository"
pwd <- "C:/Users/nicks/Desktop/Systems_Genomics/GitHub 2.0/SystemsGenomics2023/data"
pwd2 <- "C:/Users/nicks/Desktop/Systems_Genomics/GitHub 2.0/SystemsGenomics2023"
# pwd <- "/Users/valentin/Documents/ETH/Master Biotechnologie/Lectures/Sytems_Genomics/Local_git_hub_repository/data"
setwd(pwd)
samples <- list.files("rsem_genes_results_trimmed")
expr <- sapply(samples, function(sample){
file <- paste0("rsem_genes_results_trimmed/", sample)
#print(file)
quant <- read.csv(file, sep="\t", header=T)
tpm <- setNames(quant$TPM, quant$gene_id)
return(tpm)
})
SRR_codes <- colnames(expr)
SRR_codes <- gsub("\\.genes\\.results", "", SRR_codes)
colnames(expr) <- SRR_codes
setwd(pwd)
meta1 <- read.csv("SRR_Acc_List.txt", sep="\t", header=T) %>%
inner_join(read.csv("PRJNA946653 Metadata.txt", header=T),
by = c("Name" = "Run"),
suffix = c("",".y"))
meta2 <- read.csv("SRR_Acc_List.txt", sep="\t", header=T) %>%
inner_join(read.csv("PRJNA875066 Metadata.txt", header=T),
by = c("Name" = "Run"),
suffix = c("",".y"))
# print(setdiff(colnames(meta1),colnames(meta2)))
meta1_filtered <- subset(meta1, select = c("Name", "experiment_group", "sex", "treatment")) #Compare this to dendrogram
meta1_filtered$sex <- as.factor(meta1_filtered$sex)
meta1_filtered$treatment <- as.factor(meta1_filtered$treatment)
meta1_filtered$experiment_group <- as.factor(meta1_filtered$experiment_group)
meta1_aDR <- meta1_filtered %>% filter(treatment == "AL" | treatment == "aDR" )
meta1_YMP <- meta1_filtered %>% filter(treatment == "YMP" | treatment == "PBS" )
summary(meta1_filtered$sex)
summary(meta1_filtered$treatment)
#expr <- expr[,meta$Name] #to make sure the columns of the expression matrix are in the same order as rows in the metadata
#listDatasets(useEnsembl(biomart = "ensembl")) %>% filter(dataset == "mmusculus_gene_ensembl") #Is this the correct one?
library(biomaRt)
ensembl <- useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl")
meta_genes <- getBM(attributes = c("ensembl_gene_id",
"ensembl_gene_id_version",
"ensembl_transcript_id_version",
"mgi_symbol", # appearantly necessary for DEseq
"description",
"chromosome_name",
"start_position",
"end_position",
"strand"),
filters = "ensembl_gene_id_version",
values = rownames(expr),
mart = ensembl) %>%
right_join(data.frame(ensembl_gene_id_version = rownames(expr)), by = "ensembl_gene_id_version") %>% distinct(ensembl_gene_id_version, .keep_all = TRUE)
#expr_test <- expr[meta_genes$ensembl_transcript_id_version,]
# dim(expr) # 56884 annotated genes and 15 samples
avg_expr <- rowMeans(expr)
#layout(matrix(1:2, nrow=1))
hist(avg_expr)
hist(log10(avg_expr + 0.01), main = "Average gene expression (before filtering)", xlab = "log10(Average gene expression [TPM])", ylab = "Number of genes")
ggplot(data.frame(avg_expr), aes(x=avg_expr)) +
geom_histogram(bins = 50) +
scale_x_continuous(breaks = c(0,1,10,100,1000,10000,100000), trans="log1p", expand=c(0,0)) +
scale_y_continuous(breaks = c(0,1), expand=c(0,0), trans="log1p") +
theme_minimal() #log transformation of the y axis, visualization purposes
num_det <- rowSums(expr > 0) #check in how many samples each gene is detected.
hist(num_det)
#head(num_det)
# get rid of genes that are unexpressed or extremely lowly expressed
expressed <- rowMeans(expr > 0) >= 0 | rowMeans(expr) >= 0
meta_genes$expressed <- expressed
head(expressed[meta_genes$expressed]) #expressed is a vector of booleans
summary(expressed[meta_genes$expressed])
#expr <- expr[which(expressed),] #I want to keep the whole expr
#dim(expr[meta_genes$expressed,]) # 25649    15 --> now only 25'649 genes left
avg_expr <- rowMeans(expr[meta_genes$expressed,]) #now after the filtering
#layout(matrix(1:2, nrow=1))
hist(avg_expr)
hist(log10(avg_expr + 0.01), main = "Average gene expression (after filtering)", xlab = "log10(Average gene expression [TPM])", ylab = "Number of genes")
#From here you need meta_genes
#meta_genes$expressed is expressed
#meta_genes$expressed
corr_pearson <- cor(log1p(expr[meta_genes$expressed,]))
corr_spearman <- cor(expr[meta_genes$expressed,], method = "spearman")
#pheatmap(corr_pearson)
plot <- pheatmap((corr_spearman), color = colorRampPalette(c((brewer.pal(n = 9, name = "YlGnBu"))))(100),  # custom color palette YlGnBu
display_numbers = T,
number_color = "black",
number_format = "%.2f")
plot
#ggsave("spearman correlation of treated mice.svg",plot = plot, width = 9, height = 6, path = "/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository/plots")
#Dendrograms
#hcl_pearson <- hclust(as.dist(1 - corr_pearson))
#hcl_spearman <- hclust(as.dist(1 - corr_spearman))
#layout(matrix(1:2,nrow=1))
#plot(hcl_pearson)
#plot(hcl_spearman)
pca <- prcomp(log1p(t(expr[meta_genes$expressed,])), center = TRUE,scale.=TRUE)
ensembl <- useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl")
tx2gene <- getBM(attributes = c("ensembl_transcript_id_version","ensembl_gene_id_version"),
filters = "ensembl_gene_id_version",
values = rownames(expr),
mart = ensembl) %>%
dplyr::select(ensembl_transcript_id_version, ensembl_gene_id_version)
setwd(pwd)
samples <- list.files("rsem_isoforms_results_trimmed") #Hier sollten isoforms sein! nicht dedup nextera!
filtered_samples <- samples[grep("\\.isoforms\\.results$",samples)]# Remove ".isoforms.results" from all column names
files_YMP <- file.path(paste0("rsem_isoforms_results_trimmed/", filtered_samples[1:6]))
files_aDR <- file.path(paste0("rsem_isoforms_results_trimmed/", filtered_samples[7:15]))
txi_YMP <- tximport(files_YMP, type = "rsem", tx2gene = tx2gene)
txi_aDR <- tximport(files_aDR, type = "rsem", tx2gene = tx2gene)
#expr[,15] <- data.frame(txi_aDR)[,9] # this code recovers the broken dataset from mouse 79
dds_aDR <- DESeqDataSetFromTximport(txi_aDR, colData = meta1_aDR, design = ~ treatment) #the output we be in gene_ids!
#summary(dds_aDR)
rownames(dds_aDR) %>% length() #gene_id_versions
# txi_aDR, dds_aDR: 56884 genes
dds_filtered_aDR <- dds_aDR[intersect(meta_genes[meta_genes$expressed,2],rownames(dds_aDR)),]
rownames(dds_filtered_aDR) %>% length() #gene_id_versions
# sum(meta_genes$expressed): 25649; dds_filtered_aDR: 25649
dds_filtered_aDR <- DESeq(dds_filtered_aDR, test="LRT", reduced= ~ 1) #If only one covariate, use ~1
res_DESeq2_aDR <- results(dds_filtered_aDR) # 25649 genes, same amount
res_DESeq2_aDR <- data.frame(res_DESeq2_aDR)
res_DESeq2_aDR$pvalue_BH <- p.adjust(res_DESeq2_aDR$pvalue, method="BH") #Argumentieren wieso BH correction
res_DESeq2_aDR$minuslog10_pvalue_BH <- -log10(res_DESeq2_aDR$pvalue_BH)
sum(is.na(res_DESeq2_aDR$log2FoldChange))
# the meta_genes dataset contains 5962 ensembl_gene_id_version that are not found in expr,
# because we filtered expr based on the criteria rowMeans(expr > 0) >= 0.5 | rowMeans(expr) >= 1
sum(is.na(res_DESeq2_aDR$pvalue)) # 6009
temp_mask = is.na(res_DESeq2_aDR$pvalue) & !is.na(res_DESeq2_aDR$log2FoldChange)
# res_DESeq2_aDR[temp_mask,] # However, for some reason DESeq2 fucks up the pvalue for these 47 genes
res_DESeq2_aDR_fitered <- res_DESeq2_aDR[!is.na(res_DESeq2_aDR$pvalue_BH),]
res_DESeq2_aDR_DEG <- res_DESeq2_aDR_fitered[res_DESeq2_aDR_fitered$pvalue_BH < 0.05,]#filter to only have significant data, include FC?
DEG_aDR <- rownames(res_DESeq2_aDR_DEG)
DEG_aDR
libraries = c("tidyverse","ggrepel","BiocManager","pbapply","gplots","msigdbr", "biomaRt","sva","DESeq2","edgeR", "dplyr", "biomaRt", "tximport", "ggplot2", "pheatmap", "RColorBrewer", "svglite","devEMF")
lapply(libraries, library, character.only=TRUE)
library(stringi)
library(viridis)
#pwd <- "/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository/data"
#pwd2 <- "/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository"
#pwd <- "C:/Users/nicks/Desktop/Systems_Genomics/GitHub 2.0/SystemsGenomics2023/data"
#pwd2 <- "C:/Users/nicks/Desktop/Systems_Genomics/GitHub 2.0/SystemsGenomics2023"
pwd <- "/Users/valentin/Documents/ETH/Master Biotechnologie/Lectures/Sytems_Genomics/Local_git_hub_repository/data"
ensembl <- useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl")
tx2gene <- getBM(attributes = c("ensembl_transcript_id_version","ensembl_gene_id_version"),
filters = "ensembl_gene_id_version",
values = rownames(expr),
mart = ensembl) %>%
dplyr::select(ensembl_transcript_id_version, ensembl_gene_id_version)
setwd(pwd)
samples <- list.files("rsem_isoforms_results_trimmed") #Hier sollten isoforms sein! nicht dedup nextera!
filtered_samples <- samples[grep("\\.isoforms\\.results$",samples)]# Remove ".isoforms.results" from all column names
files_YMP <- file.path(paste0("rsem_isoforms_results_trimmed/", filtered_samples[1:6]))
files_aDR <- file.path(paste0("rsem_isoforms_results_trimmed/", filtered_samples[7:15]))
txi_YMP <- tximport(files_YMP, type = "rsem", tx2gene = tx2gene)
txi_aDR <- tximport(files_aDR, type = "rsem", tx2gene = tx2gene)
#expr[,15] <- data.frame(txi_aDR)[,9] # this code recovers the broken dataset from mouse 79
dds_aDR <- DESeqDataSetFromTximport(txi_aDR, colData = meta1_aDR, design = ~ treatment) #the output we be in gene_ids!
#summary(dds_aDR)
rownames(dds_aDR) %>% length() #gene_id_versions
# txi_aDR, dds_aDR: 56884 genes
dds_filtered_aDR <- dds_aDR[intersect(meta_genes[meta_genes$expressed,2],rownames(dds_aDR)),]
rownames(dds_filtered_aDR) %>% length() #gene_id_versions
# sum(meta_genes$expressed): 25649; dds_filtered_aDR: 25649
dds_filtered_aDR <- DESeq(dds_filtered_aDR, test="LRT", reduced= ~ 1) #If only one covariate, use ~1
res_DESeq2_aDR <- results(dds_filtered_aDR) # 25649 genes, same amount
res_DESeq2_aDR <- data.frame(res_DESeq2_aDR)
res_DESeq2_aDR$pvalue_BH <- p.adjust(res_DESeq2_aDR$pvalue, method="BH") #Argumentieren wieso BH correction
res_DESeq2_aDR$minuslog10_pvalue_BH <- -log10(res_DESeq2_aDR$pvalue_BH)
sum(is.na(res_DESeq2_aDR$log2FoldChange))
# the meta_genes dataset contains 5962 ensembl_gene_id_version that are not found in expr,
# because we filtered expr based on the criteria rowMeans(expr > 0) >= 0.5 | rowMeans(expr) >= 1
sum(is.na(res_DESeq2_aDR$pvalue)) # 6009
temp_mask = is.na(res_DESeq2_aDR$pvalue) & !is.na(res_DESeq2_aDR$log2FoldChange)
# res_DESeq2_aDR[temp_mask,] # However, for some reason DESeq2 fucks up the pvalue for these 47 genes
res_DESeq2_aDR_fitered <- res_DESeq2_aDR[!is.na(res_DESeq2_aDR$pvalue_BH),]
res_DESeq2_aDR_DEG <- res_DESeq2_aDR_fitered[res_DESeq2_aDR_fitered$pvalue_BH < 0.05,]#filter to only have significant data, include FC?
DEG_aDR <- rownames(res_DESeq2_aDR_DEG)
DEG_comaprison <-  data_frame("trim status" ="trimmed", "Rejuvenation approach"="aDR",DEGs = length(DEG_aDR))
dds_YMP <- DESeqDataSetFromTximport(txi_YMP, colData = meta1_YMP, design = ~ treatment) #the output we be in gene_ids!
rownames(dds_YMP) %>% length() #gene_id_versions
# txi_aDR, dds_aDR: 56'884 genes
dds_filtered_YMP <- dds_YMP[intersect(meta_genes[meta_genes$expressed,2],rownames(dds_YMP)),]
rownames(dds_filtered_YMP) %>% length() #gene_id_versions
# sum(meta_genes$expressed): 25232; dds_filtered_aDR: 25649; + 417 genes, intersect broken?
dds_filtered_YMP <- DESeq(dds_filtered_YMP, test="LRT", reduced= ~ 1) #If only one covariate, use ~1
res_DESeq2_YMP <- results(dds_filtered_YMP) # 25649 genes, same amount
res_DESeq2_YMP <- data.frame(res_DESeq2_YMP)
res_DESeq2_YMP$log2FoldChange <- -res_DESeq2_YMP$log2FoldChange
res_DESeq2_YMP$pvalue_BH <- p.adjust(res_DESeq2_YMP$pvalue, method="BH") #Argumentieren wieso BH correction
res_DESeq2_YMP$minuslog10_pvalue_BH <- -log10(res_DESeq2_YMP$pvalue_BH)
sum(is.na(res_DESeq2_YMP$log2FoldChange))
# the meta_genes dataset contains 6702 ensembl_gene_id_version that are not found in expr,
# because we filtered expr based on the criteria rowMeans(expr > 0) >= 0.5 | rowMeans(expr) >= 1
sum(is.na(res_DESeq2_YMP$pvalue)) # 6704
temp_mask = is.na(res_DESeq2_YMP$pvalue) & !is.na(res_DESeq2_YMP$log2FoldChange)
# res_DESeq2_YMP[temp_mask,] # However, for some reason DESeq2 fucks up the pvalue for these 47 genes
res_DESeq2_YMP_fitered <- res_DESeq2_YMP[!is.na(res_DESeq2_YMP$pvalue_BH),]
res_DESeq2_YMP_DEG <- res_DESeq2_YMP_fitered[res_DESeq2_YMP_fitered$pvalue_BH < 0.05,]#filter to only have significant data, include FC?
DEG_YMP <- rownames(res_DESeq2_YMP_DEG)
new_row <- c("trimmed", "YMP", length(DEG_YMP))
DEG_comaprison <- rbind(DEG_comaprison, new_row)
View(DEG_comaprison)
```{r}
```{r}
View(DEG_comaprison)
# only plotting trimmed data
ggplot(DEG_comaprison, aes(x = `Rejuvenation approach`, y = DEGs, fill = `trim status`)) +
geom_bar(stat = "identity", position = "dodge", colour="black", width = 0.7) +
labs(title = "DEGs comparison untrimmed vs. trimmed", y = "Obtained DEGs") +
theme_minimal() +
scale_fill_manual(values = c("darkorchid","darkgreen")) +
theme(legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.text = element_blank()
)
# only plotting trimmed data
ggplot(DEG_comaprison, aes(x = `Rejuvenation approach`, y = DEGs, fill = `trim status`)) +
geom_bar(stat = "identity", position = "dodge", colour="black", width = 0.7) +
labs(title = "DEGs comparison untrimmed vs. trimmed", y = "Obtained DEGs") +
theme_minimal() +
scale_fill_manual(values = c("darkorchid","darkgreen")) +
theme(legend.position = "none",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.text = element_blank()
)
#ggsave("DEGs_trimming_comparison.png",plot = plot, width = 9, height = 4, path = "/Users/valentin/Documents/ETH/Master Biotechnologie/Lectures/Sytems_Genomics/Local_git_hub_repository/plots")
# only plotting trimmed data
ggplot(DEG_comaprison, aes(x = `Rejuvenation approach`, y = DEGs, fill = `trim status`)) +
geom_bar(stat = "identity", position = "dodge", colour="black", width = 0.7) +
labs(title = "Numbers of obtained DEGs", y = "Obtained DEGs") +
theme_minimal() +
scale_fill_manual(values = c("darkorchid","darkgreen")) +
theme(legend.position = "none",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.text = element_blank()
)
#ggsave("DEGs_trimming_comparison.png",plot = plot, width = 9, height = 4, path = "/Users/valentin/Documents/ETH/Master Biotechnologie/Lectures/Sytems_Genomics/Local_git_hub_repository/plots")
# only plotting trimmed data
ggplot(DEG_comaprison, aes(x = `Rejuvenation approach`, y = DEGs, fill = `trim status`)) +
geom_bar(stat = "identity", position = "dodge", colour="black", width = 0.7) +
labs(title = "Numbers of obtained DEGs", y = "Obtained DEGs") +
theme_minimal() +
scale_fill_manual(values = c("darkorchid","darkgreen")) +
theme(legend.position = "none",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.text = element_blank()
)
ggsave("DEGs_trimmed_for_Nick.png",plot = plot, width = 9, height = 4, path = "/Users/valentin/Documents/ETH/Master Biotechnologie/Lectures/Sytems_Genomics/Local_git_hub_repository/plots")
# only plotting trimmed data
plot <- ggplot(DEG_comaprison, aes(x = `Rejuvenation approach`, y = DEGs, fill = `trim status`)) +
geom_bar(stat = "identity", position = "dodge", colour="black", width = 0.7) +
labs(title = "Numbers of obtained DEGs", y = "Obtained DEGs") +
theme_minimal() +
scale_fill_manual(values = c("darkorchid","darkgreen")) +
theme(legend.position = "none",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.text = element_blank()
)
ggsave("DEGs_trimmed_for_Nick.png",plot = plot, width = 9, height = 4, path = "/Users/valentin/Documents/ETH/Master Biotechnologie/Lectures/Sytems_Genomics/Local_git_hub_repository/plots")
