"start_position",
"end_position",
"strand"
),
filters = "ensembl_gene_id_version",
values = rownames(expr),
mart = ensembl) %>%
right_join(data.frame("ensembl_gene_id_version" = rownames(expr)),
by = "ensembl_gene_id_version") %>%
distinct(ensembl_gene_id_version, .keep_all = TRUE)
?setNames
#setwd("/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository/data")
# setwd("C:/Users/nicks/Desktop/Systems_Genomics/GitHub David/SystemsGenomics2023/data")
setwd("/Users/valentin/Documents/ETH/Master Biotechnologie/Lectures/Sytems_Genomics/Local_git_hub_repository")
# Get a list of all files in the directory
samples <- list.files("data/rsem_trimmed_dedup_nextera")
# Keep only files ending with ".genes.results"
filtered_samples <- samples[grep("\\.genes\\.results$", samples)]
# print(filtered_samples)
expr <- sapply(filtered_samples, function(sample){
file <- paste0("data/rsem_trimmed_dedup_nextera/",sample)
quant <- read.csv(file, sep="\t")
# tpm <- setNames(quant$TPM, quant$gene_id)
tpm <- setNames(quant$TPM, quant[,2])
print(tpm)
return(tpm)
})
expr <- as.data.frame(expr)
#setwd("/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository/data")
# setwd("C:/Users/nicks/Desktop/Systems_Genomics/GitHub David/SystemsGenomics2023/data")
setwd("/Users/valentin/Documents/ETH/Master Biotechnologie/Lectures/Sytems_Genomics/Local_git_hub_repository")
# Get a list of all files in the directory
samples <- list.files("data/rsem_trimmed_dedup_nextera")
# Keep only files ending with ".genes.results"
filtered_samples <- samples[grep("\\.genes\\.results$", samples)]
# print(filtered_samples)
expr <- sapply(filtered_samples, function(sample){
file <- paste0("data/rsem_trimmed_dedup_nextera/",sample)
quant <- read.csv(file, sep="\t")
# tpm <- setNames(quant$TPM, quant$gene_id)
tpm <- setNames(quant$TPM, quant[,2])
head(tpm)
return(tpm)
})
expr <- as.data.frame(expr)
data.frame(ensembl_gene_id_version = rownames(expr))
a <-  data.frame(ensembl_gene_id_version = rownames(expr))
View(a)
rownames(expr)
View(meta)
#setwd("/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository/data")
# setwd("C:/Users/nicks/Desktop/Systems_Genomics/GitHub David/SystemsGenomics2023/data")
setwd("/Users/valentin/Documents/ETH/Master Biotechnologie/Lectures/Sytems_Genomics/Local_git_hub_repository")
# Get a list of all files in the directory
samples <- list.files("data/rsem_trimmed_dedup")
# Keep only files ending with ".genes.results"
filtered_samples <- samples[grep("\\.genes\\.results$", samples)]
# print(filtered_samples)
expr <- sapply(filtered_samples, function(sample){
file <- paste0("data/rsem_trimmed_dedup/",sample)
quant <- read.csv(file, sep="\t")
# tpm <- setNames(quant$TPM, quant$gene_id)
tpm <- setNames(quant$TPM, quant[,2])
return(tpm)
})
expr <- as.data.frame(expr)
library(dplyr)
# The metadata includes many more datasets and samples than we need for our analysis
# Therefore we want to only keep the data from our accession list
# Here you need to change the Access list if you need optional data
meta <- read.csv("data/PRJNA946653 Metadata.txt", header = T) %>%
inner_join(read.csv("data/SRR_Acc_List_1.txt",sep="\t", header=T),
by = c("Run" = "Name"),
suffix = c("",".y"))
# Remove ".genes.results" from all column names
colnames(expr) <- sub("\\.genes\\.results$", "", colnames(expr))
#expr <- expr[,meta$Run] #to make sure the columns of the expression matrix are in the same order as rows in the metadata
#setwd("/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository/data")
# setwd("C:/Users/nicks/Desktop/Systems_Genomics/GitHub David/SystemsGenomics2023/data")
setwd("/Users/valentin/Documents/ETH/Master Biotechnologie/Lectures/Sytems_Genomics/Local_git_hub_repository")
# Get a list of all files in the directory
samples <- list.files("data/rsem_trimmed_dedup_nextera")
# Keep only files ending with ".genes.results"
filtered_samples <- samples[grep("\\.genes\\.results$", samples)]
# print(filtered_samples)
expr <- sapply(filtered_samples, function(sample){
file <- paste0("data/rsem_trimmed_dedup_nextera/",sample)
quant <- read.csv(file, sep="\t")
# tpm <- setNames(quant$TPM, quant$gene_id)
tpm <- setNames(quant$TPM, quant[,2])
return(tpm)
})
expr <- as.data.frame(expr)
#setwd("/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository/data")
# setwd("C:/Users/nicks/Desktop/Systems_Genomics/GitHub David/SystemsGenomics2023/data")
setwd("/Users/valentin/Documents/ETH/Master Biotechnologie/Lectures/Sytems_Genomics/Local_git_hub_repository")
# Get a list of all files in the directory
samples <- list.files("data/rsem_trimmed_dedup_nextera")
# Keep only files ending with ".genes.results"
filtered_samples <- samples[grep("\\.genes\\.results$", samples)]
# print(filtered_samples)
expr <- sapply(filtered_samples, function(sample){
file <- paste0("data/rsem_trimmed_dedup_nextera/",sample)
quant <- read.csv(file, sep="\t")
# tpm <- setNames(quant$TPM, quant$gene_id)
tpm <- setNames(quant$TPM, quant[,2])
return(tpm)
})
expr <- as.data.frame(expr)
library(dplyr)
# The metadata includes many more datasets and samples than we need for our analysis
# Therefore we want to only keep the data from our accession list
# Here you need to change the Access list if you need optional data
meta <- read.csv("data/PRJNA946653 Metadata.txt", header = T) %>%
inner_join(read.csv("data/SRR_Acc_List_1.txt",sep="\t", header=T),
by = c("Run" = "Name"),
suffix = c("",".y"))
# Remove ".genes.results" from all column names
colnames(expr) <- sub("\\.genes\\.results$", "", colnames(expr))
#expr <- expr[,meta$Run] #to make sure the columns of the expression matrix are in the same order as rows in the metadata
ensembl <- useEnsembl(biomart = "ensembl",
dataset = "mmusculus_gene_ensembl")
View(expr)
#Does not work yet, did not have internet on the train
library(biomaRt)
ensembl <- useEnsembl(biomart = "ensembl",
dataset = "mmusculus_gene_ensembl")
meta_genes <- getBM(
attributes = c(
"ensembl_gene_id",
"ensembl_gene_id_version",
"ensembl_transcript_id_version",
"description",
"chromosome_name",
"start_position",
"end_position",
"strand"
),
filters = "ensembl_transcript_id_version",
values = rownames(expr),
mart = ensembl) %>%
right_join(data.frame(ensembl_transcript_id_version = rownames(expr)),
by = "ensembl_transcript_id_version") %>%
distinct(ensembl_gene_id_version, .keep_all = TRUE)
expr <- expr[meta_genes$ensembl_transcript_id_version, ]
View(meta_genes)
View(meta_genes)
libraries = c("tidyverse","ggrepel","BiocManager","pbapply","gplots","msigdbr", "biomaRt","sva","DESeq2","edgeR")
lapply(libraries, library, character.only=TRUE)
#setwd("/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository/data")
# setwd("C:/Users/nicks/Desktop/Systems_Genomics/GitHub David/SystemsGenomics2023/data")
setwd("/Users/valentin/Documents/ETH/Master Biotechnologie/Lectures/Sytems_Genomics/Local_git_hub_repository")
# Get a list of all files in the directory
samples <- list.files("data/rsem_trimmed_dedup_nextera")
# Keep only files ending with ".genes.results"
filtered_samples <- samples[grep("\\.genes\\.results$", samples)]
# print(filtered_samples)
expr <- sapply(filtered_samples, function(sample){
file <- paste0("data/rsem_trimmed_dedup_nextera/",sample)
quant <- read.csv(file, sep="\t")
# tpm <- setNames(quant$TPM, quant$gene_id)
tpm <- setNames(quant$TPM, quant[,2])
return(tpm)
})
expr <- as.data.frame(expr)
library(dplyr)
# The metadata includes many more datasets and samples than we need for our analysis
# Therefore we want to only keep the data from our accession list
# Here you need to change the Access list if you need optional data
meta <- read.csv("data/PRJNA946653 Metadata.txt", header = T) %>%
inner_join(read.csv("data/SRR_Acc_List_1.txt",sep="\t", header=T),
by = c("Run" = "Name"),
suffix = c("",".y"))
# Remove ".genes.results" from all column names
colnames(expr) <- sub("\\.genes\\.results$", "", colnames(expr))
#expr <- expr[,meta$Run] #to make sure the columns of the expression matrix are in the same order as rows in the metadata
library(devtools)
library(httr)
devtools::install_version("dbplyr", version = "2.3.4")
httr::set_config(httr::config(ssl_verifypeer = FALSE))
#Does not work yet, did not have internet on the train
library(biomaRt)
ensembl <- useEnsembl(biomart = "ensembl",
dataset = "mmusculus_gene_ensembl")
meta_genes <- getBM(
attributes = c(
"ensembl_gene_id",
"ensembl_gene_id_version",
"ensembl_transcript_id_version",
"description",
"chromosome_name",
"start_position",
"end_position",
"strand"
),
filters = "ensembl_transcript_id_version",
values = rownames(expr),
mart = ensembl) %>%
right_join(data.frame(ensembl_transcript_id_version = rownames(expr)),
by = "ensembl_transcript_id_version") %>%
distinct(ensembl_gene_id_version, .keep_all = TRUE)
expr <- expr[meta_genes$ensembl_transcript_id_version, ]
#Does not work yet, did not have internet on the train
library(biomaRt)
ensembl <- useEnsembl(biomart = "ensembl",
dataset = "mmusculus_gene_ensembl")
meta_genes <- getBM(
attributes = c(
"ensembl_gene_id",
"ensembl_gene_id_version",
"ensembl_transcript_id_version",
"description",
"chromosome_name",
"start_position",
"end_position",
"strand"
),
filters = "ensembl_transcript_id_version",
values = rownames(expr),
mart = ensembl) %>%
right_join(data.frame(ensembl_transcript_id_version = rownames(expr)),
by = "ensembl_transcript_id_version") %>%
distinct(ensembl_transcript_id_version, .keep_all = TRUE)
#setwd("/Users/david/Library/CloudStorage/OneDrive-Persönlich/Master ETH/Courses/11_Systems Genomics/project local repository/data")
# setwd("C:/Users/nicks/Desktop/Systems_Genomics/GitHub David/SystemsGenomics2023/data")
setwd("/Users/valentin/Documents/ETH/Master Biotechnologie/Lectures/Sytems_Genomics/Local_git_hub_repository")
# Get a list of all files in the directory
samples <- list.files("data/rsem_trimmed_dedup_nextera")
# Keep only files ending with ".genes.results"
filtered_samples <- samples[grep("\\.genes\\.results$", samples)]
# print(filtered_samples)
expr <- sapply(filtered_samples, function(sample){
file <- paste0("data/rsem_trimmed_dedup_nextera/",sample)
quant <- read.csv(file, sep="\t")
# tpm <- setNames(quant$TPM, quant$gene_id)
tpm <- setNames(quant$TPM, quant[,2])
return(tpm)
})
expr <- as.data.frame(expr)
library(dplyr)
# The metadata includes many more datasets and samples than we need for our analysis
# Therefore we want to only keep the data from our accession list
# Here you need to change the Access list if you need optional data
meta <- read.csv("data/PRJNA946653 Metadata.txt", header = T) %>%
inner_join(read.csv("data/SRR_Acc_List_1.txt",sep="\t", header=T),
by = c("Run" = "Name"),
suffix = c("",".y"))
# Remove ".genes.results" from all column names
colnames(expr) <- sub("\\.genes\\.results$", "", colnames(expr))
#expr <- expr[,meta$Run] #to make sure the columns of the expression matrix are in the same order as rows in the metadata
library(devtools)
library(httr)
devtools::install_version("dbplyr", version = "2.3.4")
httr::set_config(httr::config(ssl_verifypeer = FALSE))
library(dplyr)
# The metadata includes many more datasets and samples than we need for our analysis
# Therefore we want to only keep the data from our accession list
# Here you need to change the Access list if you need optional data
meta <- read.csv("data/PRJNA946653 Metadata.txt", header = T) %>%
inner_join(read.csv("data/SRR_Acc_List_1.txt",sep="\t", header=T),
by = c("Run" = "Name"),
suffix = c("",".y"))
# Remove ".genes.results" from all column names
colnames(expr) <- sub("\\.genes\\.results$", "", colnames(expr))
#expr <- expr[,meta$Run] #to make sure the columns of the expression matrix are in the same order as rows in the metadata
View(meta_genes)
#Does not work yet, did not have internet on the train
library(biomaRt)
ensembl <- useEnsembl(biomart = "ensembl",
dataset = "mmusculus_gene_ensembl")
meta_genes <- getBM(
attributes = c(
"ensembl_gene_id",
"ensembl_gene_id_version",
"ensembl_transcript_id_version",
"description",
"chromosome_name",
"start_position",
"end_position",
"strand"
),
filters = "ensembl_transcript_id_version",
values = rownames(expr),
mart = ensembl) %>%
right_join(data.frame(ensembl_transcript_id_version = rownames(expr)),
by = "ensembl_transcript_id_version") %>%
distinct(ensembl_transcript_id_version, .keep_all = TRUE)
expr <- expr[meta_genes$ensembl_transcript_id_version, ]
#print(meta1$Name)
#print(meta2$Name)
#print(samples)
dim(expr) #meaning 56884 annotated genes and 27 samples.
avg_expr <- rowMeans(expr)
#layout(matrix(1:2, nrow=1))
hist(avg_expr)
hist(log10(avg_expr + 1))
library(ggplot2)
ggplot(data.frame(avg_expr), aes(x=avg_expr)) +
geom_histogram(bins = 50) +
scale_x_continuous(breaks = c(0,1,10,100,1000,10000,20000), trans="log1p", expand=c(0,0)) +
scale_y_continuous(breaks = c(0,1), expand=c(0,0), trans="log1p") +
theme_minimal() #log transformation of the y axis, visualization purposes
num_det <- rowSums(expr > 0) #check in how many samples each gene is detected.
hist(num_det)
head(num_det)
num_det_test <- rowSums(expr) #check in how many samples each gene is detected.
hist(num_det_test)
head(num_det_test)
max(num_det_test)
expressed <- rowMeans(expr > 0) >= 13 | rowMeans(expr) >= 1 #Something seems wrong here. >= 13 instead of >= 0.5?
head(expressed) #expressed is a vector of booleans
expr <- expr[which(expressed),]
dim(expr)
meta_genes$expressed <- expressed
#From here you need meta_genes
head(expr)
meta_genes$expressed
corr_pearson <- cor(log1p(expr[meta_genes$expressed,]))
corr_spearman <- cor(expr[meta_genes$expressed,], method = "spearman")
View(meta_genes)
?intersect
?intersect
View(expr)
?DESeq
library(knitr)
knitr::opts_chunk$set(echo = TRUE, include = TRUE, fig.align = "center")
knitr::opts_knit$set(global.par = TRUE)
library(tidyverse); options(dplyr.summarise.inform = FALSE) # suppress summarise warnings
library(cowplot)
genetic_df <- read_csv("genetic_circuit.csv")
genetic_df$experiment <- factor(genetic_df$experiment)
genetic_df$cytokine <- factor(genetic_df$cytokine)
genetic_df$figure <- factor(genetic_df$figure)
#str(genetic_df)
# I do not have any zeroes for the concentration, so I do not need
# to add any constant
genetic_df$concentration_log <- log(genetic_df$concentration)
# The minimal non-zero SEAP value is 0.1663.
# Therefore a small positive constant of 0.1 is added for the log-transform.
genetic_df$seap_log <- log(genetic_df$seap + 0.1)
fit1 <- lm(seap ~ (concentration + experiment + cytokine)*figure, genetic_df)
fit2 <- lm(seap_log ~ (concentration + experiment + cytokine)*figure, genetic_df)
fit3 <- lm(seap ~ (concentration_log + experiment + cytokine)*figure, genetic_df)
fit4 <- lm(seap_log ~ (concentration_log + experiment + cytokine)*figure, genetic_df)
r2_neither <- summary(fit1)$r.squared
r2_onlySeap <- summary(fit2)$r.squared
r2_onlyConcentration <- summary(fit3)$r.squared
r2_both <- summary(fit4)$r.squared
print(c(r2_neither, r2_onlySeap, r2_onlyConcentration, r2_both))
anova(fit4)
fit4 <- lm(seap_log ~ (concentration_log + experiment + cytokine)*figure, genetic_df)
fit5 <- lm(seap_log ~ (concentration_log * experiment + cytokine)*figure, genetic_df)
fit6 <- lm(seap_log ~ (concentration_log + experiment * cytokine)*figure, genetic_df)
fit7 <- lm(seap_log ~ (concentration_log * experiment * cytokine)*figure, genetic_df)
models <- list(fit4 = fit4, fit5 = fit5, fit6 = fit6, fit7 = fit7)
plots_list <- list()
for (model_name in names(models)) {
# Extract the model
current_model <- models[[model_name]]
local_df <- genetic_df
local_df$resid <- resid(current_model)
local_df$fitted <- fitted(current_model)
# Linear model diagram with estimated slopes
p1 <- ggplot(local_df, aes(x = concentration_log, y = seap_log,
color = figure, group = figure)) +
geom_point(size = 0.5) +
geom_smooth(method = lm, formula = y ~ x, se = FALSE) +
theme_bw() +
ggtitle(paste("Linear regression model for", model_name)) +
theme(plot.title = element_text(size = 10),  # Adjust title size
axis.title = element_text(size = 9))  # Adjust axis title size
# QQ-plot
p2 <- ggplot(local_df) +
theme_minimal() +
scale_y_continuous("Empirical Quantile") +
scale_x_continuous("Theoretical Quantile") +
stat_qq(aes(sample = resid), color = "forestgreen", size = 1) +
stat_qq_line(aes(sample = resid), color = "darkorchid") +
ggtitle(paste("Normal QQ-Plot for", model_name)) +
theme(legend.position = "none",
plot.title = element_text(size = 10),  # Adjust title size
axis.title = element_text(size = 9))   # Adjust axis title size
# Residual plot
p3 <- ggplot(local_df, aes(x = fitted, y = resid)) +
geom_point(aes(colour = figure), size = 1, alpha = 0.33) +
xlab(expression(hat(y))) + ylab(expression(epsilon)) +
ggtitle(paste("Residual plot for", model_name)) +
theme(plot.title = element_text(size = 10),  # Adjust title size
axis.title = element_text(size = 9))   # Adjust axis title size
# Histogram
p4 <- ggplot(local_df, aes(x = resid, y = after_stat(density))) +
theme_bw() + xlab(expression(epsilon)) +
geom_histogram(binwidth = 0.1, colour = "forestgreen",
fill = "forestgreen", alpha = 0.5) +
ggtitle(paste("Residual distribution for", model_name)) +
theme(plot.title = element_text(size = 10),  # Adjust title size
axis.title = element_text(size = 9))   # Adjust axis title size
# Combine the plots with adjusted size
combined_plots <- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2,
rel_widths = c(1.5, 1), rel_heights = c(1, 1))
# Save the combined plots in a list
plots_list[[model_name]] <- combined_plots
}
plots_list[["fit4"]]
plots_list[["fit5"]]
plots_list[["fit6"]]
plots_list[["fit7"]]
anova(fit4)
anova(fit5)
anova(fit6)
anova(fit7)
AIC_4 <- AIC(fit4)
AIC_5 <- AIC(fit5)
AIC_6 <- AIC(fit6)
AIC_7 <- AIC(fit7)
print(c(AIC_4,AIC_5,AIC_6,AIC_7))
summary(fit4)
local_df <- genetic_df
local_df$resid <- resid(fit4)
local_df$fitted <- fitted(fit4)
# Linear model diagram with estimated slopes
p1 <- ggplot(local_df, aes(x = concentration_log, y = seap_log,
color = figure, group = figure)) +
geom_point(size = 0.5) +
geom_smooth(method = lm, formula = y ~ x, se = FALSE) +
theme_bw() +
ggtitle(paste("Linear regression model for different figures")) +
theme(plot.title = element_text(size = 10),  # Adjust title size
axis.title = element_text(size = 9))  # Adjust axis title size
# Linear model diagram with estimated slopes
p5 <- ggplot(filter(local_df, figure == "1d"), aes(x = concentration_log, y = seap_log,
color = experiment, group = experiment)) +
geom_point(size = 0.5) +
geom_smooth(method = lm, formula = y ~ x, se = FALSE) +
theme_bw() +
ggtitle(paste("Linear regression model for different experiments")) +
theme(plot.title = element_text(size = 10),  # Adjust title size
axis.title = element_text(size = 9))  # Adjust axis title size
# Linear model diagram with estimated slopes
p6 <- ggplot(filter(local_df, figure == "1d"), aes(x = concentration_log, y = seap_log,
color = cytokine, group = cytokine)) +
geom_point(size = 0.5) +
geom_smooth(method = lm, formula = y ~ x, se = FALSE) +
theme_bw() +
ggtitle(paste("Linear regression model for different cytokines")) +
theme(plot.title = element_text(size = 10),  # Adjust title size
axis.title = element_text(size = 9))  # Adjust axis title size
# QQ-plot
p2 <- ggplot(local_df) +
theme_minimal() +
scale_y_continuous("Empirical Quantile") +
scale_x_continuous("Theoretical Quantile") +
stat_qq(aes(sample = resid), color = "forestgreen", size = 1) +
stat_qq_line(aes(sample = resid), color = "darkorchid") +
ggtitle(paste("Normal QQ-Plot")) +
theme(legend.position = "none",
plot.title = element_text(size = 10),  # Adjust title size
axis.title = element_text(size = 9))   # Adjust axis title size
# Residual plot
p3 <- ggplot(local_df, aes(x = fitted, y = resid)) +
geom_point(aes(colour = figure), size = 1, alpha = 0.33) +
xlab(expression(hat(y))) + ylab(expression(epsilon)) +
ggtitle(paste("Residual plot")) +
theme(plot.title = element_text(size = 10),  # Adjust title size
axis.title = element_text(size = 9))   # Adjust axis title size
# Histogram
p4 <- ggplot(local_df, aes(x = resid, y = after_stat(density))) +
theme_bw() + xlab(expression(epsilon)) +
geom_histogram(binwidth = 0.1, colour = "forestgreen",
fill = "forestgreen", alpha = 0.5) +
ggtitle(paste("Residual distribution")) +
theme(plot.title = element_text(size = 10),  # Adjust title size
axis.title = element_text(size = 9))   # Adjust axis title size
p5
# First I need to make a binary indicator for figure 1d:
genetic_df$indicator <- ifelse(genetic_df$figure == "1d", "experimental", "control")
# Build the model as described above:
final_model <- lm(seap_log ~ concentration_log + concentration_log:indicator
+ experiment + cytokine +figure, genetic_df)
summary(final_model)
# First I need to make a binary indicator for figure 1d:
genetic_df$indicator <- ifelse(genetic_df$figure == "1d", "experimental", "control")
# Build the model as described above:
final_model <- lm(seap_log ~ concentration_log + concentration_log:indicator
+ (experiment + cytokine) *figure, genetic_df)
summary(final_model)
# First I need to make a binary indicator for figure 1d:
genetic_df$indicator <- ifelse(genetic_df$figure == "1d", "experimental", "control")
# Build the model as described above:
final_model <- lm(seap_log ~ concentration_log + concentration_log:indicator
+ experiment + cytokine +figure, genetic_df)
final_model2 <- lm(seap_log ~ concentration_log + concentration_log:indicator
+ (experiment + cytokine)*figure, genetic_df)
summary(final_model)
summary(final_model2)
summary(fit4)
# First I need to make a binary indicator for figure 1d:
genetic_df$indicator <- ifelse(genetic_df$figure == "1d", "experimental", "control")
# Build the model as described above:
final_model <- lm(seap_log ~ concentration_log + concentration_log:indicator
+ experiment + cytokine +figure, genetic_df)
final_model2 <- lm(seap_log ~ concentration_log + concentration_log:indicator
+ (experiment + cytokine)*figure, genetic_df)
summary(final_model)
summary(final_model2)
summary(fit4)
test <- lm(seap_log ~ concentration_log:indicator + experiment
+ cytokine +figure, genetic_df)
summary(test)
test <- lm(seap_log ~ concentration_log:indicator + (experiment
+ cytokine)*figure, genetic_df)
summary(test)
